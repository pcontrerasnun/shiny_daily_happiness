VaR(rcminvardep, weights=pesosminvar, method="historical", p=.95)
VaR.historical.portfolio
as.matrix(rcminvardep)
VaR(rcminvardep, weights=pesosminvar, method="historical", p=.95)
n <- 10^5
u <- runif(n)
g <- 4*sqrt(1-u^2)
plot(g)
plot(g, ylim=c(0, 10))
sd(g)
s^2
s <- sd(g)
s^2
mean(g)
n <- 10^3
u <- runif(n)
suma <- sum(u)
version
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
py_config(
)
use_python("/Users/danielcontreras/anaconda3/bin/python")
reticulate::repl_python()
conda_list
conda_list()
use_condaenv("anaconda3")
import pandas as pd
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
??echo
use_condaenv("anaconda3")
library(reticulate)
use_condaenv("anaconda3")
library(reticulate)
use_condaenv("anaconda3")
library(reticulate)
use_condaenv("anaconda3")
setwd("~/Desktop/challenge")
areas_gnral <- read.csv("areas/areas.general.csv", sep = ";")
View(areas_gnral)
View(areas_gnral)
View(areas_gnral)
library(ggmap)
install.packages("ggmap")
library(ggmap)
install.packages("tmap")
install.packages("tmap")
library(tmap)
remove.packages("tmap")
install.packages("tmap")
library(tmap)
install.packages("rgdal", repos="http://cran.rstudio.com/", dependencies=TRUE)
install.packages("rgdal", repos="http://cran.rstudio.com/", dependencies=TRUE)
library(tmap)
install.packages("osmdata")
library(osmdata)
madrid <- getbb("Madrid") %>% osq() % add_osm_feature(key = "administrative", admin_level="6")
madrid <- getbb("Madrid") %>% opq() % add_osm_feature(key = "administrative", admin_level="6")
madrid <- getbb("Madrid") %>% opq() % add_osm_feature(key = "admin_level", admin_level="6")
madrid <- getbb("Madrid") %>% opq() %>% add_osm_feature(key = "admin_level", admin_level="6")
madrid <- getbb("Madrid") %>% opq() %>% add_osm_feature(key = "admin_level", value="6")
View(madrid)
madrid <- getbb("Madrid") %>% opq() %>% add_osm_feature(key = "admin_level", value="6") %>% osmdata_sf()
View(madrid)
madrid <- getbb("Comunidad de Madrid") %>% opq() %>% add_osm_feature(key = "admin_level", value="8") %>% osmdata_sf()
barrios <- madrid$osm_multipolygons
qtm(barrios)
View(barrios)
?get_map()
install.packages("ggmap")
library(ggmap)
?get_map()
madrid2 <- get_map(location = "Madrid")
madrid2 <- get_map(location = "Madrid", source = "osm")
madrid2 <- get_map(location = "Madrid", source = "osm", scale = "get_openstreetmap")
madrid2 <- get_map(location = "Madrid", source = "osm", scale = "get_openstreetmap", force = T)
madrid <- getbb("Comunidad de Madrid") %>% opq() %>% add_osm_feature(key = "admin_level", value="3") %>% osmdata_sf()
barrios <- madrid$osm_multipolygons
madrid <- getbb("Comunidad de Madrid") %>% opq() %>% add_osm_feature(key = "boundary", value="administrative") %>% osmdata_sf()
barrios <- madrid$osm_multipolygons
qtm(barrios)
View(barrios)
madrid <- getbb("Comunidad de Madrid") %>% opq() %>% add_osm_feature(key = "boundary", value=c("administrative",3)) %>% osmdata_sf()
barrios <- madrid$osm_multipolygons
qtm(barrios)
madrid2 <- getbb("Comunidad de Madrid") %>% opq() %>%
add_osm_feature(key = "admin_level", value="3") %>% osmdata_sf()
barrios <- madrid2$osm_multipolygons
madrid2 <- getbb("Comunidad de Madrid") %>% opq() %>%
add_osm_feature(key = "admin_level", value="4") %>% osmdata_sf()
madrid2 <- getbb("Comunidad de Madrid") %>% opq() %>%
add_osm_feature(key = "admin_level", value="10") %>% osmdata_sf()
madrid2 <- getbb("Comunidad de Madrid") %>% opq() %>%
add_osm_feature(key = "admin_level", value="9") %>% osmdata_sf()
barrios <- madrid2$osm_multipolygons
qtm(barrios)
madrid2 <- getbb("Comunidad de Madrid") %>% opq() %>%
add_osm_feature(key = "admin_level", value="10") %>% osmdata_sf()
barrios <- madrid2$osm_multipolygons
madrid <- getbb("Comunidad de Madrid, Spain") %>%
opq() %>% add_osm_feature(key = "boundary", value="postal_code") %>% osmdata_sf()
barrios <- madrid$osm_multipolygons
qtm(barrios)
madrid <- getbb("Madrid, Spain") %>%
opq() %>% add_osm_feature(key = "boundary", value="postal_code") %>% osmdata_sf()
barrios <- madrid$osm_multipolygons
View(madrid)
madrid2 <- getbb("Madrid, Spain") %>% opq() %>%
add_osm_feature(key = "admin_level", value="10") %>% osmdata_sf()
View(madrid2)
barrios <- madrid2$osm_multipolygons
qtm(barrios)
madrid <- getbb("Madrid, España") %>%
opq() %>% add_osm_feature(key = "boundary", value="postal_code") %>% osmdata_sf()
barrios <- madrid$osm_multipolygons
madrid <- getbb("Madrid, Spain") %>%
opq() %>% add_osm_feature(key = "highway", value="name") %>% osmdata_sf()
View(madrid)
?getbb
?getbb()
madrid <- getbb('Madrid, Spain') %>%
opq() %>% add_osm_feature(key = 'highway') %>% osmdata_sf()
View(madrid)
qtm(barrios)
madrid <- getbb('Madrid, España') %>%
opq() %>% add_osm_feature(key = 'highway') %>% osmdata_sf()
madrid <- opq(bbox = "Madrid, Spain") %>% add_osm_feature(key = 'highway') %>% osmdata_sf()
madrid <- opq(bbox = "Madrid, Spain") %>% add_osm_feature(key = 'highway') %>% osmdata_sf()
library(dplyr)
madrid <- opq(bbox = "Madrid, Spain") %>% add_osm_feature(key = 'highway') %>% osmdata_sf()
library(osmdata)
madrid <- opq(bbox = "Madrid, Spain") %>% add_osm_feature(key = 'highway') %>% osmdata_sf()
View(madrid)
barrios <- madrid$osm_multipolygons
qtm(barrios)
library(tmap)
qtm(barrios)
View(barrios)
barrios <- madrid$osm_lines
qtm(barrios)
barrios <- madrid$osm_multilines
View(barrios)
qtm(barrios)
barrios <- madrid$osm_polygons
qtm(barrios)
madrid <- opq(bbox = "Madrid, Spain") %>% add_osm_feature(key = 'amenity', value = "prision") %>% osmdata_sf()
madrid <- opq(bbox = "Madrid, Spain") %>% add_osm_feature(key = 'amenity', value = "prison") %>% osmdata_sf()
View(madrid)
View(madrid)
barrios <- madrid$osm_polygons
qtm(barrios)
install.packages("leaflet")
library(leaflet)
leaflet(barrios) %>% addTiles()
?opq()
library(osmdata)
library(tmap)
library(sf)
madrid <- getbb('Madrid, España') %>%
opq() %>% add_osm_feature(admin_level = "8") %>% osmdata_sf()
madrid <- getbb('Madrid, España') %>%
opq() %>% add_osm_feature(key = "boundary", value="administrativa", admin_level="8") %>% osmdata_sf()
madrid <- getbb('Madrid, Spain') %>%
opq() %>% add_osm_feature(key = "boundary", value="administrative", admin_level="8") %>%
add_osm_feature(key = "admin_level", value="8") %>%
osmdata_sf()
madrid <- getbb('Madrid, Spain') %>%
opq() %>% add_osm_feature(key = "boundary", value="administrative") %>%
add_osm_feature(key = "admin_level", value="8") %>%
osmdata_sf()
View(madrid)
barrios <- madrid$osm_multipolygons
qtm(barrios)
madrid <- getbb('Community of Madrid, Spain') %>%
opq() %>% add_osm_feature(key = "boundary", value="administrative") %>%
add_osm_feature(key = "admin_level", value="8") %>%
osmdata_sf()
madrid <- getbb('Community of Madrid, Spain') %>%
opq(timeout = 40) %>% add_osm_feature(key = "boundary", value="administrative") %>%
add_osm_feature(key = "admin_level", value="8") %>%
osmdata_sf()
barrios <- madrid$osm_multipolygons
qtm(barrios)
View(barrios)
madrid <- getbb('Community of Madrid, Spain') %>%
opq(timeout = 40) %>% add_osm_feature(key = "boundary", value="administrative") %>%
add_osm_feature(key = "admin_level", value="4") %>%
osmdata_sf()
barrios <- madrid$osm_multipolygons
qtm(barrios)
View(barrios)
madrid <- getbb('Comunidad de Madrid, España') %>%
opq(timeout = 40) %>% add_osm_feature(key = "boundary", value="administrative") %>%
add_osm_feature(key = "admin_level", value="4") %>%
osmdata_sf()
barrios <- madrid$osm_multipolygons
View(barrios)
madrid <- getbb('España') %>%
opq(timeout = 40) %>% add_osm_feature(key = "boundary", value="administrative") %>%
add_osm_feature(key = "admin_level", value="4") %>%
osmdata_sf()
barrios <- madrid$osm_multipolygons
View(madrid)
madrid <- getbb('España') %>%
opq(timeout = 40) %>% add_osm_feature(key = "boundary", value="administrative") %>%
add_osm_feature(key = "admin_level", value="4") %>%
add_osm_feature(key = "admin_level", value="8") %>%
osmdata_sf()
View(madrid)
madrid <- getbb('Comunidad de Madrid, España') %>%
opq(timeout = 40) %>% add_osm_feature(key = "boundary", value="administrative") %>%
add_osm_feature(key = "admin_level", value="4") %>%
add_osm_feature(key = "admin_level", value="8") %>%
osmdata_sf()
View(madrid)
barrios <- madrid$osm_polygons
View(barrios)
barrios <- madrid$osm_lines
qtm(barrios)
tmap(barrios)
library(tmap)
tmap(barrios)
tm_shaoe(barrios)
tm_shape(barrios)
tm_shape(barrios) + tm_border()
tm_shape(barrios) + tm_borders()
barrios <- madrid$osm_polygons
tm_shape(barrios) + tm_borders()
madrid_prov <- getbb('Comunidad de Madrid, España') %>%
opq(timeout = 40) %>% add_osm_feature(key = "boundary", value="administrative") %>%
add_osm_feature(key = "admin_level", value="4") %>%
osmdata_sf()
madrid_barrios <- getbb('Comunidad de Madrid, España') %>%
opq(timeout = 40) %>% add_osm_feature(key = "boundary", value="administrative") %>%
add_osm_feature(key = "admin_level", value="8") %>%
osmdata_sf()
View(madrid_barrios)
View(madrid_prov)
prov <- madrid_prov$osm_multipolygons
barrios <- madrid_barrios$osm_multipolygons
View(prov)
prov <- madrid_prov$osm_multipolygons %>% select(name == "Comunidad de Madrid")
library(dplyr)
prov <- madrid_prov$osm_multipolygons %>% select(name == "Comunidad de Madrid")
prov <- prov %>% select(name == "Comunidad de Madrid")
View(prov)
prov <- madrid_prov$osm_multipolygons %>% filter(name == "Comunidad de Madrid")
tm_shape(prov) + tm_borders()
tm_shape(prov) + tm_borders() + tm_shape(barrios) + tm_borders()
View(barrios)
sum(is.na(madrid_barrios$ine.municipio))
?substr()
barrios <- madrid_barrios$osm_multipolygons %>% (substr(ine.municipio, 1, 2) == "28")
barrios <- madrid_barrios$osm_multipolygons %>% filter(substr(ine.municipio, 1, 2) == "28")
tm_shape(prov) + tm_borders() + tm_shape(barrios) + tm_borders()
}
shinyApp(ui, server = function(input, output) { })
library(shiny)
shinyApp(ui, server = function(input, output) { })
shinyApp(ui, server = function(input, output) { })
ui <- fluidPage(
dateInput("date1", "Date:", value = "2012-02-29"),
# Default value is the date in client's time zone
dateInput("date2", "Date:"),
# value is always yyyy-mm-dd, even if the display format is different
dateInput("date3", "Date:", value = "2012-02-29", format = "mm/dd/yy"),
# Pass in a Date object
dateInput("date4", "Date:", value = Sys.Date()-10),
# Use different language and different first day of week
dateInput("date5", "Date:",
language = "ru",
weekstart = 1),
# Start with decade view instead of default month view
dateInput("date6", "Date:",
startview = "decade"),
# Disable Mondays and Tuesdays.
dateInput("date7", "Date:", daysofweekdisabled = c(1,2)),
# Disable specific dates.
dateInput("date8", "Date:", value = "2012-02-29",
datesdisabled = c("2012-03-01", "2012-03-02"))
)
shinyApp(ui, server = function(input, output) { })
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
dateInput("dateInput", "Selecciona una fecha:", format = "dd/mm/yyyy", weekstart = 1,
language = "es"),
)
shinyApp(ui, server = function(input, output) { })
runApp('projects/shiny_daily_happiness')
runApp('projects/shiny_daily_happiness')
shiny::runGist("c4db11d81f3c46a7c4a5")
library(DT)
install.packages("DT")
shiny::runGist("c4db11d81f3c46a7c4a5")
shiny::runGist("c4db11d81f3c46a7c4a5")
runApp('projects/shiny_daily_happiness')
runApp('projects/shiny_daily_happiness')
runApp('projects/shiny_daily_happiness')
runApp('projects/shiny_daily_happiness')
?sapply()
install.packages('googlesheets4')
install.packages("googlesheets4")
clear
shiny::runApp('projects/shiny_daily_happiness')
googledrive::drive_auth()
googlesheets4::gs4_auth()
library(googlesheets4)
gs4_auth()
options(gargle_oauth_cache = ".secrets")
gs4_auth()
list.files(".secrets/")
?list.files()
getwd()
ss <- gs4_get("https://docs.google.com/spreadsheets/d/1gUUh3OCLceWFTTBbZd12NFMLr8sjK8pPu9vUAPH8Pyw/edit#gid=0")
ss
setwd("~/projects/shiny_daily_happiness")
options(gargle_oauth_cache = ".secrets")
gs4_auth()
runApp()
shinyApp(
ui <- fluidPage(
theme = shinytheme("spacelab"),
# Application title
titlePanel("Daily Happiness"),
dateInput(inputId = "date", label = "Selecciona una fecha:", format = "dd/mm/yyyy",
weekstart = 1, language = "es"),
sliderInput(inputId = 'happiness', label = "¿Repeterías día?", min = 0, max = 10, value = 5),
sliderInput(inputId = 'happiness_error', label = "Margen de error", min = -1, max = 1, value = 0),
textInput(inputId = 'things_done', label = '¿Qué has hecho?'),
textInput(inputId = "feelings", label = "¿Qué has sentido?"),
actionButton(inputId = "submitInput", label = "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submitInput, {
saveData(formData())
})
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
runApp()
sheet_id <- "1gUUh3OCLceWFTTBbZd12NFMLr8sjK8pPu9vUAPH8Pyw"
read_sheet(sheet_id)
gs4_auth()
# Para info sobre como conectar shiny y google sheets https://www.jdtrat.com/blog/connect-shiny-google/
# y https://stackoverflow.com/questions/63535190/connect-to-googlesheets-via-shiny-in-r-with-googlesheets4
options(
# whenever there is one account token found, use the cached token
gargle_oauth_email = TRUE,
# specify auth tokens should be stored in a hidden directory ".secrets"
gargle_oauth_cache = "shiny_daily_happiness/.secrets"
)
read_sheet(sheet_id)
read_sheet(sheet_id)
getwd()
# Para info sobre como conectar shiny y google sheets https://www.jdtrat.com/blog/connect-shiny-google/
# y https://stackoverflow.com/questions/63535190/connect-to-googlesheets-via-shiny-in-r-with-googlesheets4
options(
# whenever there is one account token found, use the cached token
gargle_oauth_email = TRUE,
# specify auth tokens should be stored in a hidden directory ".secrets"
gargle_oauth_cache = ".secrets"
)
read_sheet(sheet_id)
list.files(".secrets/")
drive_auth()
library(googledrive)
googledrive::drive_auth()
runApp()
shiny::runGist("c4db11d81f3c46a7c4a5")
runApp()
read_sheet(ss = sheet_id)
# Para info sobre como conectar shiny y google sheets https://www.jdtrat.com/blog/connect-shiny-google/
# y https://stackoverflow.com/questions/63535190/connect-to-googlesheets-via-shiny-in-r-with-googlesheets4
options(
# whenever there is one account token found, use the cached token
gargle_oauth_email = TRUE,
# specify auth tokens should be stored in a hidden directory ".secrets"
gargle_oauth_cache = ".secrets"
)
read_sheet(ss = sheet_id)
sheet_id <- drive_get("DailyHappiness")$id
?options()
getwd()
gargle_oauth_cache()
library(gargle)
gargle_oauth_cache()
# Read the data
read_sheet(ss = sheet_id)
?list.files()
getwd()
list.files()
gs_ls()
library(googlesheets4)
library(gargle)
library(googledrive)
gs_ls()
gargle_oauth_cache()
# Para info sobre como conectar shiny y google sheets https://www.jdtrat.com/blog/connect-shiny-google/
# y https://stackoverflow.com/questions/63535190/connect-to-googlesheets-via-shiny-in-r-with-googlesheets4
options(
# whenever there is one account token found, use the cached token
gargle_oauth_email = TRUE,
# specify auth tokens should be stored in a hidden directory ".secrets"
gargle_oauth_cache = ".secrets"
)
googledrive::drive_auth()
googlesheets4::gs4_auth()
sheet_id <- "1gUUh3OCLceWFTTBbZd12NFMLr8sjK8pPu9vUAPH8Pyw"
# Read the data
read_sheet(ss = sheet_id)
sheet_id <- googledrive::drive_get("DailyHappiness")$id
list.files(".secrets/")
gs4_deauth()
gs4_auth(cache = ".secrets", email = "pcontrer95@gmail.com")
# Read the data
read_sheet(ss = sheet_id)
gs4_get("https://docs.google.com/spreadsheets/d/1gUUh3OCLceWFTTBbZd12NFMLr8sjK8pPu9vUAPH8Pyw/edit#gid=0")
sheet_append(ss, data.frame(time=Sys.time()))
ss <- gs4_get("https://docs.google.com/spreadsheets/d/1gUUh3OCLceWFTTBbZd12NFMLr8sjK8pPu9vUAPH8Pyw/edit#gid=0")
sheet_append(ss, data.frame(time=Sys.time()))
library(cli)
sheet_append(ss, data.frame(time=Sys.time()))
runApp()
# Read the data
read_sheet(ss = sheet_id)
saveData <- function(data) {
# The data must be a dataframe rather than a named vector
data <- data %>% as.list() %>% data.frame()
# Add the data as a new row
sheet_append(ss = sheet_id, data = data)
}
loadData <- function() {
# Read the data
read_sheet(ss = sheet_id)
}
runApp()
fields <- c("date", "happiness", "happiness_error", "things_done", "feelings")
data <- sapply(fields, function(x) input[[x]])
data <- c('hola','hola','adios','adios')
# The data must be a dataframe rather than a named vector
data <- data %>% as.list() %>% data.frame()
data
# Add the data as a new row
sheet_append(ss = sheet_id, data = data)
runApp()
runApp()
runApp()
runApp()
runApp()
c('hola')
test <- c('hola', 'hola')
test[[1]]
test <- c('hola', 'adios', 'bye')
test[[1]]
test[[2]]
test[[3]]
test[3]
data <- test %>% as.list() %>% data.frame()
data
runApp()
read_data(sheet_id)
read_sheet(sheet_id)
runApp()
as.Date(19206)
runApp()
runApp()
runApp()
runApp()
as.Date(as.POSIXlt(19207*24*60*60, origin = '1970-01-01'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.Date(as.POSIXlt(as.numeric("19207")*24*60*60, origin = '1970-01-01'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
